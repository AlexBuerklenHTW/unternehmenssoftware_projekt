import openai

file_path = "API_KEY"
openai.api_key = open(file_path, "r").read()


## Topic (buyer_and_seller): Paul wants to sell his Iphone and Sarah is a potential buyer.
def buyer_and_seller():
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user",
             "content": "Paul and Sarah are going to have a conversation, that needs to end up with a deal."},
            {"role": "assistant",
             "content": "You take the role of a seller (name: Paul). You have a used Iphone 13, that you want to sell for 700€. You are ready to negotiate, but not under 500€."},
            {"role": "assistant",
             "content": "You take the role of a buyer (name: Sarah). You are interested in the Iphone 13. You have a budget of 600€. You want to negotiate down to 550€, but would take the Iphone 13 for 600€."}
        ]
    )
    print(response['choices'][0]['message']['content'])


def buyer_and_seller_evaluator():
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are gonna be the evaluator of responses generated by yourself. The topic was: Paul and Sarah are going to have a conversation, that needs to end up with a deal."
             "You are gonna evaluate the responses on a scale."
             "The scale starts from 1 being a bad deal for the seller and a good deal for the buyer to 10 being a bad deal for the buyer and a good deal for the seller."},
            {"role": "user", "content": "3rd run:"
                                        "Paul: Hi Sarah! I heard you're interested in purchasing an iPhone 13. I have a used one available for sale. How can I assist you?"
                                        "Sarah: Hi Paul! Yes, I've been looking for an iPhone 13 at a reasonable price. Can you tell me more about the condition of the phone and the price you're asking for it?"
                                        "Paul: Certainly! The iPhone 13 I have is in great condition, with no major scratches or dents. It has been well-maintained and functions perfectly. As for the price, I'm looking to sell it for 700€. However, I am open to negotiation."
                                        "Sarah: That sounds promising, Paul. I understand that you're willing to negotiate. Considering my budget, would you consider selling it for 550€?"
                                        "Paul: I appreciate your offer, Sarah. While I understand your budget, I can't go as low as 550€. However, I could meet you halfway at 650€. What do you think?"
                                        "Sarah: Hmm, that's still a bit more than I was hoping to spend. Is there any chance you could consider selling it for 600€?"
                                        "Paul: I understand your budget concerns, Sarah. Let's see if we can reach a compromise. How about we settle at 625€? It would be a discount for you, and I believe it's a fair middle ground."
                                        "Sarah: That's closer to my budget, Paul, but can we push it just a bit further to 600€? I assure you, it's the most I can afford."
                                        "Paul: I appreciate your commitment, Sarah. Given your dedication and enthusiasm, I can agree to sell the iPhone 13 to you for 600€, which is slightly below my desired price. Let's make a deal!"
                                        "Sarah: Thank you so much, Paul! I'm really excited to get my hands on the iPhone 13. Let's finalize the transaction."
                                        "Paul: Fantastic! I'm glad we were able to come to an agreement. We can arrange the payment and delivery details to suit both our convenience. Thank you for your cooperation, Sarah!"
                                        "Sarah: Likewise, Paul! I'm looking forward to completing this transaction smoothly. Thank you for your understanding and flexibility."}
        ]
    )
    print(response['choices'][0]['message']['content'])

buyer_and_seller_evaluator()
